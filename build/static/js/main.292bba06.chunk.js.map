{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","state","emojis","props","data","text","emoji","currentTarget","dataset","id","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","this","msg","setTimeout","Object","entries","map","item","index","length","key","scope","element","idx","onClick","copy","bind","data-id","description","Set","tags","concat","aliases","join","unicode_version","className","renderAllPages","Component","App","rendered_emojis","searchStr","loaded","reload","copy_msg","searchInput","event","search_str","target","value","toLowerCase","categories","filter","includes","setState","fetch","then","json","_","init","category_","category","tmp","single_emoji","push","type","placeholder","size","onChange","title","copy_toggle","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.292bba06.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n// Table class\r\n\r\nclass Table extends Component {\r\n    // a table containing a selection of emojis\r\n    state = {\r\n        emojis: this.props.data\r\n    }\r\n    \r\n    copy(text) {\r\n        // copies to clipboard\r\n        let emoji = text.currentTarget.dataset.id\r\n        let textField = document.createElement('textarea')\r\n        textField.innerText = emoji\r\n        document.body.appendChild(textField)\r\n        textField.select()\r\n        document.execCommand('copy')\r\n        textField.remove()\r\n\r\n        this.props.msg()\r\n\r\n        setTimeout(() => {this.props.msg()}, 3000)\r\n    }\r\n\r\n    // renderNextPage() {\r\n    //     // let pages = this.state.pages\r\n    //     return (\r\n    //         <div>\r\n    //         <h1>{this.props.data.category}</h1><table>\r\n    //             <thead>\r\n    //                 <tr>\r\n    //                 <th scope=\"col\">Emoji</th>\r\n    //                 <th scope=\"col\">Description</th>\r\n    //                 <th scope=\"col\">Aliases and Tags</th>\r\n    //                 <th scope=\"col\">Unicode Version</th>\r\n    //                 </tr>\r\n    //             </thead>\r\n    //             <tbody>\r\n    //         {\r\n    //         this.props.data.emojis.map((element, index) => {\r\n    //             if (element.category === this.state.category) {\r\n    //                 return (\r\n    //                     // remove duplicates of tags and aliases \r\n    //                     <tr onClick={this.copy.bind(this)} data-id={element.text}><td>{element.text}</td><td>{element.description}</td><td>{[...new Set(element.tags.concat(element.aliases))].join(\", \")} </td><td>{element.unicode_version}</td></tr>\r\n    //                 )\r\n    //             } \r\n    //             // else if (pages !== this.state.pages) {\r\n    //             //     // set next category and end map\r\n    //             //     this.state.category = element.category\r\n    //             //     this.state.pages++\r\n    //             //     return\r\n    //             // }\r\n    //         })\r\n    //         }\r\n    //         </tbody></table></div>\r\n    //     )\r\n    // }\r\n\r\n    renderAllPages() {\r\n        // render all the pages\r\n\r\n        // debug\r\n        // console.log(this.state.emojis)\r\n\r\n        // for each entry\r\n        return Object.entries(this.state.emojis).map((item, index) => {\r\n            // console.log(category)\r\n            // if empty, don't display anything\r\n            if (!item[1].length) {\r\n                return <div></div>\r\n            }\r\n            return (\r\n                <div key={`table${index}`}>\r\n                <h1>{item[0]}</h1>\r\n                <table>\r\n                    {/* header row */}\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Emoji</th>\r\n                            <th scope=\"col\">Description</th>\r\n                            <th scope=\"col\">Aliases and Tags</th>\r\n                            <th scope=\"col\">Unicode Version</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {item[1].map((element, idx) => {\r\n                            // console.log(element[1].text)\r\nreturn (<tr onClick={this.copy.bind(this)} data-id={element.text} key={`table${index}-${idx}`} ><td>{element.text}</td><td>{element.description}</td><td>{[...new Set(element.tags.concat(element.aliases))].join(\", \")} </td><td>{element.unicode_version}</td></tr>)\r\n                        })}\r\n</tbody></table></div>\r\n            )\r\n        })\r\n    }\r\n\r\n    \r\n    render() {\r\n        // render all pages\r\n        return (\r\n            <div className=\"table\">\r\n                {this.renderAllPages()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table\r\n","import React, {Component} from 'react';\r\nimport Table from './Table';\r\n// import Search from './Search';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        data: {},\r\n        emojis: {},\r\n        rendered_emojis: {},\r\n        // category: \"\",\r\n        // pages: 1,\r\n        searchStr: '',\r\n        loaded: false,\r\n        reload: false,\r\n        copy_msg: false\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // mounts json\r\n        this.setState({loaded: false})\r\n        fetch('json/emoji.json')\r\n            .then(data => data.json())\r\n            .then(data => this.setState({data}))\r\n            .then(_ => this.init())\r\n            .then(data => this.setState({data, loaded: true}))\r\n    }\r\n    \r\n    init() {\r\n        // once we get the json, this is called\r\n\r\n        // set the first category \r\n        let category_ = this.state.data[0].category\r\n        let categories = {}\r\n\r\n        let tmp = []\r\n\r\n        // for each emoji, set row\r\n        for (let emoji of this.state.data) {\r\n            // set emoji data\r\n            let single_emoji = {\r\n                text: emoji.emoji,\r\n                description: emoji.description,\r\n                category: emoji.category,\r\n                aliases: emoji.aliases,\r\n                tags: emoji.tags,\r\n                unicode_version: emoji.unicode_version\r\n            }\r\n            // assuming emojis are in order of categories\r\n            if (category_ !== emoji.category) {\r\n                categories[category_] = tmp\r\n                category_ = emoji.category\r\n                tmp = []\r\n            }\r\n            // push single emoji into emojis state\r\n            tmp.push(single_emoji)\r\n        }\r\n\r\n    this.setState({emojis: categories})\r\n    this.setState({rendered_emojis: categories})\r\n    // debug\r\n    // console.log(this.state.emojis)\r\n    }\r\n\r\n    copy_toggle() {\r\n        // after copies onto clipboard, display message\r\n        // console.log(this.state.copy_msg)\r\n        this.setState({copy_msg: !this.state.copy_msg})\r\n    }\r\n\r\n    // TODO: move to search\r\n    searchInput = (event) => {\r\n        let search_str = event.target.value.toLowerCase()\r\n        let categories = {}\r\n        // debug\r\n        // console.log(search_str)\r\n        // console.log(this.state.emojis)\r\n        \r\n        // for every emojis category\r\n        Object.entries(this.state.emojis).map(item => {\r\n            // filters through all the emoji names\r\n            categories[item[0]] = item[1].filter(emoji => {\r\n                return (emoji.description.includes(search_str) || emoji.aliases.includes(search_str) || emoji.tags.join().includes(search_str))\r\n            })\r\n            return categories[item[0]]\r\n        })\r\n        \r\n        // set state so it can rerender\r\n        this.setState({rendered_emojis: categories,searchStr: search_str, loaded: !this.state.loaded})\r\n        // console.log(this.state.rendered_emojis, this.state.loaded)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main_content\" key=\"App\">\r\n                {/* searching */}\r\n            <div className=\"search\">\r\n                <input id=\"searchInput\" type=\"text\" placeholder=\"Search for Emoji\" size=\"20\" onChange={this.searchInput} title=\"Search Emoji\"></input>\r\n                <button className=\"btn\" type=\"submit\">Search</button>\r\n            </div>\r\n                {/* <Search /> (Scrapped*/}\r\n\r\n                {/* table */}\r\n                {this.state.loaded ? <Table data={this.state.rendered_emojis} msg={this.copy_toggle.bind(this)} key=\"table1\"/>: <p className=\"none\">...</p>}\r\n                {this.state.loaded ? <p className=\"none\">...</p> :<Table data={this.state.rendered_emojis} msg={this.copy_toggle.bind(this)} />}\r\n\r\n                {/* copied notice */}\r\n                {this.state.copy_msg ? <p id=\"notice\">Copied Emoji</p>: <p></p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}